// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// spqrs
List spqrs(NumericVector response, NumericVector predictor, NumericVector tau, int degree, int dimension, double tau_penalty, int number_lambdas, double lambda_max, double epsilon_lambda, int maxiter, double epsilon_iterations, bool non_crossing);
RcppExport SEXP _spqrs_spqrs(SEXP responseSEXP, SEXP predictorSEXP, SEXP tauSEXP, SEXP degreeSEXP, SEXP dimensionSEXP, SEXP tau_penaltySEXP, SEXP number_lambdasSEXP, SEXP lambda_maxSEXP, SEXP epsilon_lambdaSEXP, SEXP maxiterSEXP, SEXP epsilon_iterationsSEXP, SEXP non_crossingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type response(responseSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type predictor(predictorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< int >::type dimension(dimensionSEXP);
    Rcpp::traits::input_parameter< double >::type tau_penalty(tau_penaltySEXP);
    Rcpp::traits::input_parameter< int >::type number_lambdas(number_lambdasSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_max(lambda_maxSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon_lambda(epsilon_lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon_iterations(epsilon_iterationsSEXP);
    Rcpp::traits::input_parameter< bool >::type non_crossing(non_crossingSEXP);
    rcpp_result_gen = Rcpp::wrap(spqrs(response, predictor, tau, degree, dimension, tau_penalty, number_lambdas, lambda_max, epsilon_lambda, maxiter, epsilon_iterations, non_crossing));
    return rcpp_result_gen;
END_RCPP
}
// bsplines
NumericMatrix bsplines(NumericVector x, NumericVector t, int degree, int derivative);
RcppExport SEXP _spqrs_bsplines(SEXP xSEXP, SEXP tSEXP, SEXP degreeSEXP, SEXP derivativeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< int >::type derivative(derivativeSEXP);
    rcpp_result_gen = Rcpp::wrap(bsplines(x, t, degree, derivative));
    return rcpp_result_gen;
END_RCPP
}
// bspline
NumericVector bspline(NumericVector x, NumericVector t, int degree, int j, int derivative);
RcppExport SEXP _spqrs_bspline(SEXP xSEXP, SEXP tSEXP, SEXP degreeSEXP, SEXP jSEXP, SEXP derivativeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< int >::type derivative(derivativeSEXP);
    rcpp_result_gen = Rcpp::wrap(bspline(x, t, degree, j, derivative));
    return rcpp_result_gen;
END_RCPP
}
// bsp
double bsp(double x, NumericVector t, int degree, int j);
RcppExport SEXP _spqrs_bsp(SEXP xSEXP, SEXP tSEXP, SEXP degreeSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(bsp(x, t, degree, j));
    return rcpp_result_gen;
END_RCPP
}
// dbsp
double dbsp(double x, NumericVector t, int degree, int j, int derivative);
RcppExport SEXP _spqrs_dbsp(SEXP xSEXP, SEXP tSEXP, SEXP degreeSEXP, SEXP jSEXP, SEXP derivativeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type degree(degreeSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< int >::type derivative(derivativeSEXP);
    rcpp_result_gen = Rcpp::wrap(dbsp(x, t, degree, j, derivative));
    return rcpp_result_gen;
END_RCPP
}
// jump_bsplines
NumericMatrix jump_bsplines(NumericVector t, int degree);
RcppExport SEXP _spqrs_jump_bsplines(SEXP tSEXP, SEXP degreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type degree(degreeSEXP);
    rcpp_result_gen = Rcpp::wrap(jump_bsplines(t, degree));
    return rcpp_result_gen;
END_RCPP
}
// knots2t
NumericVector knots2t(NumericVector knots, int degree);
RcppExport SEXP _spqrs_knots2t(SEXP knotsSEXP, SEXP degreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type knots(knotsSEXP);
    Rcpp::traits::input_parameter< int >::type degree(degreeSEXP);
    rcpp_result_gen = Rcpp::wrap(knots2t(knots, degree));
    return rcpp_result_gen;
END_RCPP
}
// dim2knots
NumericVector dim2knots(NumericVector predictor, int dimension, int degree);
RcppExport SEXP _spqrs_dim2knots(SEXP predictorSEXP, SEXP dimensionSEXP, SEXP degreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type predictor(predictorSEXP);
    Rcpp::traits::input_parameter< int >::type dimension(dimensionSEXP);
    Rcpp::traits::input_parameter< int >::type degree(degreeSEXP);
    rcpp_result_gen = Rcpp::wrap(dim2knots(predictor, dimension, degree));
    return rcpp_result_gen;
END_RCPP
}
// lambdas_all
NumericVector lambdas_all(NumericVector response, int number_lambdas, double lambda_max, double epsilon_lambda);
RcppExport SEXP _spqrs_lambdas_all(SEXP responseSEXP, SEXP number_lambdasSEXP, SEXP lambda_maxSEXP, SEXP epsilon_lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type response(responseSEXP);
    Rcpp::traits::input_parameter< int >::type number_lambdas(number_lambdasSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_max(lambda_maxSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon_lambda(epsilon_lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(lambdas_all(response, number_lambdas, lambda_max, epsilon_lambda));
    return rcpp_result_gen;
END_RCPP
}
// check
double check(double u, double tau);
RcppExport SEXP _spqrs_check(SEXP uSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(check(u, tau));
    return rcpp_result_gen;
END_RCPP
}
// Check
double Check(NumericVector v, double tau);
RcppExport SEXP _spqrs_Check(SEXP vSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(Check(v, tau));
    return rcpp_result_gen;
END_RCPP
}
// NumericVectors
ListOf<NumericVector> NumericVectors(int size);
RcppExport SEXP _spqrs_NumericVectors(SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(NumericVectors(size));
    return rcpp_result_gen;
END_RCPP
}
// IntegerVectors
ListOf<IntegerVector> IntegerVectors(int size);
RcppExport SEXP _spqrs_IntegerVectors(SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(IntegerVectors(size));
    return rcpp_result_gen;
END_RCPP
}
// support_of_vector
IntegerVector support_of_vector(NumericVector v);
RcppExport SEXP _spqrs_support_of_vector(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(support_of_vector(v));
    return rcpp_result_gen;
END_RCPP
}
// find_solution
double find_solution(NumericVector v, NumericVector w, double tau, double tau_penalty, double lambda, NumericVector a, NumericVector c, IntegerVector pen_type);
RcppExport SEXP _spqrs_find_solution(SEXP vSEXP, SEXP wSEXP, SEXP tauSEXP, SEXP tau_penaltySEXP, SEXP lambdaSEXP, SEXP aSEXP, SEXP cSEXP, SEXP pen_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type tau_penalty(tau_penaltySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c(cSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type pen_type(pen_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(find_solution(v, w, tau, tau_penalty, lambda, a, c, pen_type));
    return rcpp_result_gen;
END_RCPP
}
// find_slope_v
bool find_slope_v(NumericVector v, NumericVector w, double tau, double tau_penalty, double lambda, NumericVector a, NumericVector c, int i, IntegerVector pen_type);
RcppExport SEXP _spqrs_find_slope_v(SEXP vSEXP, SEXP wSEXP, SEXP tauSEXP, SEXP tau_penaltySEXP, SEXP lambdaSEXP, SEXP aSEXP, SEXP cSEXP, SEXP iSEXP, SEXP pen_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type tau_penalty(tau_penaltySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c(cSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type pen_type(pen_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(find_slope_v(v, w, tau, tau_penalty, lambda, a, c, i, pen_type));
    return rcpp_result_gen;
END_RCPP
}
// find_slope_c
bool find_slope_c(NumericVector v, NumericVector w, double tau, double tau_penalty, double lambda, NumericVector a, NumericVector c, int l, IntegerVector pen_type);
RcppExport SEXP _spqrs_find_slope_c(SEXP vSEXP, SEXP wSEXP, SEXP tauSEXP, SEXP tau_penaltySEXP, SEXP lambdaSEXP, SEXP aSEXP, SEXP cSEXP, SEXP lSEXP, SEXP pen_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type tau_penalty(tau_penaltySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c(cSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type pen_type(pen_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(find_slope_c(v, w, tau, tau_penalty, lambda, a, c, l, pen_type));
    return rcpp_result_gen;
END_RCPP
}
// type_forward
double type_forward(double target, double tau_penalty, double lambda, double a, double c);
RcppExport SEXP _spqrs_type_forward(SEXP targetSEXP, SEXP tau_penaltySEXP, SEXP lambdaSEXP, SEXP aSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type target(targetSEXP);
    Rcpp::traits::input_parameter< double >::type tau_penalty(tau_penaltySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(type_forward(target, tau_penalty, lambda, a, c));
    return rcpp_result_gen;
END_RCPP
}
// type_backward
double type_backward(double target, double tau_penalty, double lambda, double a, double c);
RcppExport SEXP _spqrs_type_backward(SEXP targetSEXP, SEXP tau_penaltySEXP, SEXP lambdaSEXP, SEXP aSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type target(targetSEXP);
    Rcpp::traits::input_parameter< double >::type tau_penalty(tau_penaltySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(type_backward(target, tau_penalty, lambda, a, c));
    return rcpp_result_gen;
END_RCPP
}
// find_interval
int find_interval(NumericVector y, double z);
RcppExport SEXP _spqrs_find_interval(SEXP ySEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(find_interval(y, z));
    return rcpp_result_gen;
END_RCPP
}
// find_interval_weight
int find_interval_weight(NumericVector w, double tau);
RcppExport SEXP _spqrs_find_interval_weight(SEXP wSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(find_interval_weight(w, tau));
    return rcpp_result_gen;
END_RCPP
}
// bubble_order
IntegerVector bubble_order(NumericVector vec);
RcppExport SEXP _spqrs_bubble_order(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(bubble_order(vec));
    return rcpp_result_gen;
END_RCPP
}
// subsetNumVec
NumericVector subsetNumVec(NumericVector x, IntegerVector index);
RcppExport SEXP _spqrs_subsetNumVec(SEXP xSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(subsetNumVec(x, index));
    return rcpp_result_gen;
END_RCPP
}
// subsetIntVec
IntegerVector subsetIntVec(IntegerVector x, IntegerVector index);
RcppExport SEXP _spqrs_subsetIntVec(SEXP xSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(subsetIntVec(x, index));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_spqrs_spqrs", (DL_FUNC) &_spqrs_spqrs, 12},
    {"_spqrs_bsplines", (DL_FUNC) &_spqrs_bsplines, 4},
    {"_spqrs_bspline", (DL_FUNC) &_spqrs_bspline, 5},
    {"_spqrs_bsp", (DL_FUNC) &_spqrs_bsp, 4},
    {"_spqrs_dbsp", (DL_FUNC) &_spqrs_dbsp, 5},
    {"_spqrs_jump_bsplines", (DL_FUNC) &_spqrs_jump_bsplines, 2},
    {"_spqrs_knots2t", (DL_FUNC) &_spqrs_knots2t, 2},
    {"_spqrs_dim2knots", (DL_FUNC) &_spqrs_dim2knots, 3},
    {"_spqrs_lambdas_all", (DL_FUNC) &_spqrs_lambdas_all, 4},
    {"_spqrs_check", (DL_FUNC) &_spqrs_check, 2},
    {"_spqrs_Check", (DL_FUNC) &_spqrs_Check, 2},
    {"_spqrs_NumericVectors", (DL_FUNC) &_spqrs_NumericVectors, 1},
    {"_spqrs_IntegerVectors", (DL_FUNC) &_spqrs_IntegerVectors, 1},
    {"_spqrs_support_of_vector", (DL_FUNC) &_spqrs_support_of_vector, 1},
    {"_spqrs_find_solution", (DL_FUNC) &_spqrs_find_solution, 8},
    {"_spqrs_find_slope_v", (DL_FUNC) &_spqrs_find_slope_v, 9},
    {"_spqrs_find_slope_c", (DL_FUNC) &_spqrs_find_slope_c, 9},
    {"_spqrs_type_forward", (DL_FUNC) &_spqrs_type_forward, 5},
    {"_spqrs_type_backward", (DL_FUNC) &_spqrs_type_backward, 5},
    {"_spqrs_find_interval", (DL_FUNC) &_spqrs_find_interval, 2},
    {"_spqrs_find_interval_weight", (DL_FUNC) &_spqrs_find_interval_weight, 2},
    {"_spqrs_bubble_order", (DL_FUNC) &_spqrs_bubble_order, 1},
    {"_spqrs_subsetNumVec", (DL_FUNC) &_spqrs_subsetNumVec, 2},
    {"_spqrs_subsetIntVec", (DL_FUNC) &_spqrs_subsetIntVec, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_spqrs(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
